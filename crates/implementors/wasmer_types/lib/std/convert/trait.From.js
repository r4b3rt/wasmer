(function() {var implementors = {};
implementors["wasmer_types"] = [{"text":"impl&lt;K:&nbsp;Hash + Eq + Archive + Clone, V:&nbsp;Archive&gt; From&lt;IndexMap&lt;K, V, RandomState&gt;&gt; for ArchivableIndexMap&lt;K, V&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;VMExternRef&gt; for ExternRef","synthetic":false,"types":[]},{"text":"impl From&lt;ExternRef&gt; for VMExternRef","synthetic":false,"types":[]},{"text":"impl From&lt;[u8; 16]&gt; for V128","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ [u8]&gt; for V128","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 0], [Type; 0])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 0], [Type; 1])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 0], [Type; 2])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 0], [Type; 3])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 0], [Type; 4])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 0], [Type; 5])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 0], [Type; 6])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 0], [Type; 7])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 0], [Type; 8])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 0], [Type; 9])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 1], [Type; 0])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 1], [Type; 1])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 1], [Type; 2])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 1], [Type; 3])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 1], [Type; 4])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 1], [Type; 5])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 1], [Type; 6])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 1], [Type; 7])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 1], [Type; 8])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 1], [Type; 9])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 2], [Type; 0])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 2], [Type; 1])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 2], [Type; 2])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 2], [Type; 3])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 2], [Type; 4])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 2], [Type; 5])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 2], [Type; 6])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 2], [Type; 7])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 2], [Type; 8])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 2], [Type; 9])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 3], [Type; 0])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 3], [Type; 1])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 3], [Type; 2])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 3], [Type; 3])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 3], [Type; 4])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 3], [Type; 5])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 3], [Type; 6])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 3], [Type; 7])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 3], [Type; 8])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 3], [Type; 9])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 4], [Type; 0])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 4], [Type; 1])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 4], [Type; 2])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 4], [Type; 3])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 4], [Type; 4])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 4], [Type; 5])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 4], [Type; 6])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 4], [Type; 7])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 4], [Type; 8])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 4], [Type; 9])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 5], [Type; 0])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 5], [Type; 1])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 5], [Type; 2])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 5], [Type; 3])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 5], [Type; 4])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 5], [Type; 5])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 5], [Type; 6])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 5], [Type; 7])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 5], [Type; 8])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 5], [Type; 9])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 6], [Type; 0])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 6], [Type; 1])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 6], [Type; 2])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 6], [Type; 3])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 6], [Type; 4])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 6], [Type; 5])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 6], [Type; 6])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 6], [Type; 7])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 6], [Type; 8])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 6], [Type; 9])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 7], [Type; 0])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 7], [Type; 1])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 7], [Type; 2])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 7], [Type; 3])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 7], [Type; 4])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 7], [Type; 5])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 7], [Type; 6])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 7], [Type; 7])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 7], [Type; 8])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 7], [Type; 9])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 8], [Type; 0])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 8], [Type; 1])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 8], [Type; 2])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 8], [Type; 3])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 8], [Type; 4])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 8], [Type; 5])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 8], [Type; 6])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 8], [Type; 7])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 8], [Type; 8])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 8], [Type; 9])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 9], [Type; 0])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 9], [Type; 1])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 9], [Type; 2])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 9], [Type; 3])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 9], [Type; 4])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 9], [Type; 5])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 9], [Type; 6])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 9], [Type; 7])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 9], [Type; 8])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;([Type; 9], [Type; 9])&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'_ FunctionType&gt; for FunctionType","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for Mutability","synthetic":false,"types":[]},{"text":"impl From&lt;Mutability&gt; for bool","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Pages","synthetic":false,"types":[]},{"text":"impl From&lt;Pages&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;i32&gt; for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: WasmValueType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;u32&gt; for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: WasmValueType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;i64&gt; for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: WasmValueType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;u64&gt; for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: WasmValueType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;f32&gt; for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: WasmValueType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;f64&gt; for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: WasmValueType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;ExternRef&gt; for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: WasmValueType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ReservedValue&gt; From&lt;T&gt; for PackedOption&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ReservedValue&gt; From&lt;Option&lt;T&gt;&gt; for PackedOption&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()