(function() {var implementors = {};
implementors["test_generator"] = [{"text":"impl RefUnwindSafe for Testsuite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Test","synthetic":true,"types":[]}];
implementors["wasmer"] = [{"text":"impl RefUnwindSafe for HostEnvInitError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LazyInit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Exports","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; RefUnwindSafe for ExportsIterator&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithEnv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithoutEnv","synthetic":true,"types":[]},{"text":"impl&lt;Args, Rets&gt; RefUnwindSafe for Function&lt;Args, Rets&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Args: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rets: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S0","synthetic":true,"types":[]},{"text":"impl&lt;A1&gt; RefUnwindSafe for S1&lt;A1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2&gt; RefUnwindSafe for S2&lt;A1, A2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3&gt; RefUnwindSafe for S3&lt;A1, A2, A3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4&gt; RefUnwindSafe for S4&lt;A1, A2, A3, A4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5&gt; RefUnwindSafe for S5&lt;A1, A2, A3, A4, A5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6&gt; RefUnwindSafe for S6&lt;A1, A2, A3, A4, A5, A6&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7&gt; RefUnwindSafe for S7&lt;A1, A2, A3, A4, A5, A6, A7&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8&gt; RefUnwindSafe for S8&lt;A1, A2, A3, A4, A5, A6, A7, A8&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9&gt; RefUnwindSafe for S9&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10&gt; RefUnwindSafe for S10&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11&gt; RefUnwindSafe for S11&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12&gt; RefUnwindSafe for S12&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13&gt; RefUnwindSafe for S13&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14&gt; RefUnwindSafe for S14&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15&gt; RefUnwindSafe for S15&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16&gt; RefUnwindSafe for S16&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17&gt; RefUnwindSafe for S17&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A17 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18&gt; RefUnwindSafe for S18&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A17 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A18 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19&gt; RefUnwindSafe for S19&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A17 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A18 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A19 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20&gt; RefUnwindSafe for S20&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A17 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A18 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A19 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A20 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21&gt; RefUnwindSafe for S21&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A17 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A18 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A19 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A20 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A21 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22&gt; RefUnwindSafe for S22&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A17 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A18 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A19 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A20 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A21 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A22 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23&gt; RefUnwindSafe for S23&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A17 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A18 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A19 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A20 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A21 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A22 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A23 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24&gt; RefUnwindSafe for S24&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A17 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A18 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A19 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A20 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A21 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A22 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A23 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A24 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25&gt; RefUnwindSafe for S25&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A17 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A18 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A19 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A20 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A21 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A22 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A23 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A24 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A25 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26&gt; RefUnwindSafe for S26&lt;A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A1 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A10 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A11 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A12 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A13 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A14 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A15 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A16 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A17 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A18 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A19 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A2 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A20 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A21 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A22 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A23 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A24 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A25 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A26 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A3 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A4 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A5 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A6 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A7 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A8 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A9 as FromToNativeWasmType&gt;::Native: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmFunctionDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctionDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionDefinition","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Function","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DynamicFunctionWithoutEnv","synthetic":true,"types":[]},{"text":"impl&lt;Env&gt; !RefUnwindSafe for DynamicFunctionWithEnv&lt;Env&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Memory","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportObject","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImportObjectIterator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Instance","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstantiationError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IoCompileError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl&lt;Args&nbsp;=&nbsp;(), Rets&nbsp;=&nbsp;()&gt; !RefUnwindSafe for NativeFunc&lt;Args, Rets&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Array","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl&lt;T, Ty&gt; RefUnwindSafe for WasmPtr&lt;T, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Store","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseTunables","synthetic":true,"types":[]}];
implementors["wasmer_c_api"] = [{"text":"impl RefUnwindSafe for wasmer_export_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_export_func_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_exports_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_export_descriptor_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamedExportDescriptors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_export_descriptors_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_import_export_value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_import_export_kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_global_descriptor_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_global_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_wasi_map_dir_entry_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_import_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_import_object_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_import_func_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_import_descriptor_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_import_descriptors_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_import_object_iter_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamedImportDescriptors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_instance_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_instance_context_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_memory_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_module_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_serialized_module_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_table_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_value_tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_value_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_result_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_limits_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_limit_option_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_byte_array","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CApiError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_compiler_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_engine_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_config_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_engine_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_func_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_global_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_memory_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_table_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_extern_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_extern_vec_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_instance_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_module_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_store_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasm_trap_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_exporttype_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_exporttype_vec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_externkind_enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_externtype_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExternTypeConversionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_frame_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_frame_vec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_functype_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_functype_vec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_globaltype_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_globaltype_vec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_importtype_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_importtype_vec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_memorytype_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_memorytype_vec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_limits_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_mutability_enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_tabletype_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_tabletype_vec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_valkind_enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_valtype_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_valtype_vec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_byte_vec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for owned_wasm_name_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_ref_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_features_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasmer_metering_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasmer_middleware_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_parser_operator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_target_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_triple_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasmer_cpu_features_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasmer_named_extern_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasmer_named_extern_vec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_val_inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_val_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasm_val_vec_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasi_config_t","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for wasi_env_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasi_version_t","synthetic":true,"types":[]}];
implementors["wasmer_cache"] = [{"text":"impl RefUnwindSafe for FileSystemCache","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hash","synthetic":true,"types":[]}];
implementors["wasmer_cli"] = [{"text":"impl RefUnwindSafe for Cache","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inspect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Wasi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Run","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfUpdate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Validate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Wast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmFeatures","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrettyError","synthetic":true,"types":[]},{"text":"impl&lt;'a, D&gt; RefUnwindSafe for Indented&lt;'a, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmerCLIOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompilerOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompilerType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EngineType","synthetic":true,"types":[]}];
implementors["wasmer_compiler"] = [{"text":"impl RefUnwindSafe for InstructionAddressMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionAddressMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompileError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MiddlewareError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseCpuFeatureError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompiledFunctionFrameInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompiledFunction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dwarf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compilation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JumpTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompileModuleInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedCompileModuleInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompileModuleInfoResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelocationKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Relocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelocationTarget","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CpuFeature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrapInformation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompiledFunctionUnwindInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FunctionBodyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; RefUnwindSafe for ModuleInfoTranslation&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; RefUnwindSafe for ModuleEnvironment&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for MiddlewareBinaryReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MiddlewareReaderState&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleTranslationState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CustomSectionProtection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CustomSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceLoc","synthetic":true,"types":[]}];
implementors["wasmer_compiler_cranelift"] = [{"text":"impl !RefUnwindSafe for CraneliftCompiler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CraneliftOptLevel","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Cranelift","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleInfoMemoryOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleInfoVmctxInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriterRelocate","synthetic":true,"types":[]},{"text":"impl&lt;'module_environment&gt; RefUnwindSafe for FuncEnvironment&lt;'module_environment&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RelocSink&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrapSink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrampolineRelocSink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalVariable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElseData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlStackFrame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueExtraInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncTranslationState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncTranslator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CraneliftUnwindInfo","synthetic":true,"types":[]}];
implementors["wasmer_compiler_llvm"] = [{"text":"impl RefUnwindSafe for Aarch64SystemV","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X86_64SystemV","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LLVMCompiler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShortNames","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompiledKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LLVM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElfSectionIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompiledFunction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FuncTrampoline","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FuncTranslator","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, 'a&gt; !RefUnwindSafe for LLVMFunctionCodeGenerator&lt;'ctx, 'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; RefUnwindSafe for Intrinsics&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; RefUnwindSafe for MemoryCache&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; RefUnwindSafe for TableCache&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; RefUnwindSafe for GlobalCache&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; RefUnwindSafe for FunctionCache&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, 'a&gt; !RefUnwindSafe for CtxType&lt;'ctx, 'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; RefUnwindSafe for ControlFrame&lt;'ctx&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfElseState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtraInfo","synthetic":true,"types":[]},{"text":"impl&lt;'ctx&gt; RefUnwindSafe for State&lt;'ctx&gt;","synthetic":true,"types":[]}];
implementors["wasmer_compiler_singlepass"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for FuncGen&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialLabelSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrapTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CanonicalizeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFrame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfElseState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodegenError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for I2O1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegisterIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmAbstractValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MachineState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MachineStateDiff","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MachineValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionStateMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SuspendOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffsetInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SinglepassCompiler","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Singlepass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Condition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Size","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XMMOrMemory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GPROrMemory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MachineStackOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Machine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GPR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XMM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X64Register","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgumentRegisterAllocator","synthetic":true,"types":[]}];
implementors["wasmer_derive"] = [{"text":"impl RefUnwindSafe for WasmerAttr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmerAttrInner","synthetic":true,"types":[]}];
implementors["wasmer_emscripten"] = [{"text":"impl RefUnwindSafe for EmAddrInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmSockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LongJumpRet","synthetic":true,"types":[]},{"text":"impl&lt;T, Ty&gt; RefUnwindSafe for WasmPtr&lt;T, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmPollFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for guest_tm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GuestStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmEnv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LibcDirWrapper","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OLD_ABORT_ON_CANNOT_GROW_MEMORY_SIG","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EmscriptenData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmscriptenGlobalsData","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EmscriptenGlobals","synthetic":true,"types":[]}];
implementors["wasmer_engine"] = [{"text":"impl RefUnwindSafe for EngineId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SerializeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DeserializeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LinkError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstantiationError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Export","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportFunctionMetadata","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExportFunction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExportTable","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExportMemory","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExportGlobal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullResolver","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for NamedResolverChain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnprocessedFunctionFrameInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SerializableFunctionFrameInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionFrameInfoVisitor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RuntimeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RuntimeErrorSource","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RuntimeErrorInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FRAME_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalFrameInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalFrameInfoRegistration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleInfoFrameInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionExtent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameInfo","synthetic":true,"types":[]}];
implementors["wasmer_engine_dummy"] = [{"text":"impl RefUnwindSafe for DummyArtifactMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyArtifact","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyEngine","synthetic":true,"types":[]}];
implementors["wasmer_engine_jit"] = [{"text":"impl RefUnwindSafe for JITArtifact","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for JIT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodeMemory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JITEngine","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for JITEngineInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SerializableCompilation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SerializableModule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnwindRegistry","synthetic":true,"types":[]}];
implementors["wasmer_engine_native"] = [{"text":"impl RefUnwindSafe for NativeArtifact","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Native","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NativeEngine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Linker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NativeEngineInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedModuleMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleMetadataResolver","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleMetadataSymbolRegistry&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["wasmer_engine_object_file"] = [{"text":"impl RefUnwindSafe for ObjectFileArtifact","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ObjectFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectFileEngine","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ObjectFileEngineInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleMetadataSymbolRegistry","synthetic":true,"types":[]}];
implementors["wasmer_integration_tests_cli"] = [{"text":"impl RefUnwindSafe for LinkCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compiler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Engine","synthetic":true,"types":[]}];
implementors["wasmer_middlewares"] = [{"text":"impl RefUnwindSafe for MeteringGlobalIndexes","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Metering&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FunctionMetering&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MeteringPoints","synthetic":true,"types":[]}];
implementors["wasmer_object"] = [{"text":"impl RefUnwindSafe for ObjectError","synthetic":true,"types":[]}];
implementors["wasmer_types"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for ArchivedPrimaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for ArchivableIndexMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !RefUnwindSafe for ArchivedArchivableIndexMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !RefUnwindSafe for ArchivableIndexMapResolver&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMExternRef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMExternRefInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Features","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedFeatures","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FeaturesResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalFunctionIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedLocalFunctionIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalFunctionIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalTableIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalMemoryIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalGlobalIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedLocalGlobalIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalGlobalIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedFunctionIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedTableIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedGlobalIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedMemoryIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedSignatureIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedDataIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElemIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedElemIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElemIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CustomSectionIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedCustomSectionIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CustomSectionIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedExportIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedImportIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportIndexResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableInitializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedTableInitializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableInitializerResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataInitializerLocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedDataInitializerLocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataInitializerLocationResolver","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; RefUnwindSafe for DataInitializer&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedDataInitializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedOwnedDataInitializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedDataInitializerResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Atomically","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NonAtomically","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, A&nbsp;=&nbsp;NonAtomically&gt; !RefUnwindSafe for MemoryView&lt;'a, T, A&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for V128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedV128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for V128Resolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExternType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedFunctionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionTypeResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mutability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedMutability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MutabilityResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedGlobalType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalTypeResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalInit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedGlobalInit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalInitResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedTableType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableTypeResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedMemoryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryTypeResolver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ImportType&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ExportType&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pages","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedPages","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PagesResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PageCountOutOfRange","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Value&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PackedOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for BoxedSlice&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for Keys&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for PrimaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for SecondaryMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wasmer_vm"] = [{"text":"impl !RefUnwindSafe for VMExport","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMExportFunction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMExportTable","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMExportMemory","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMExportGlobal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncDataRegistry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMFuncRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Imports","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstanceAllocator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstanceRef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Instance","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportFunctionEnv","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstanceHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedMemoryStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryStyleResolver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LinearMemory","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMMemoryDefinitionOwnership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmMmap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mmap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedModuleId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleIdResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivableModuleInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedArchivableModuleInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivableModuleInfoResolver","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ExportsIterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ImportsIterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureRegistry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArchivedTableStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableStyleResolver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TableElement","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RawTableElement","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LinearTable","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMTableDefinitionOwnership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrapCode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Trap","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CallThreadState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnwindReason","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMFunctionEnvironment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMFunctionImport","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for VMDynamicFunctionContext&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMFunctionBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMFunctionKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMTableImport","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMMemoryImport","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMGlobalImport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMMemoryDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMTableDefinition","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMGlobalDefinitionStorage","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VMGlobalDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMCallerCheckedAnyfunc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMBuiltinFunctionIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMBuiltinFunctionsArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMOffsets","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetSharedSignatureIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LibCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionBodyPtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionBodyPtr","synthetic":true,"types":[]}];
implementors["wasmer_wasi"] = [{"text":"impl&lt;T, Ty&gt; RefUnwindSafe for WasmPtr&lt;T, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WasiStateBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasiStateCreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreopenDirBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreopenedDir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasiFsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollEventBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollEventIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stdout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stderr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stdin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pipe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InodeVal","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fd","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WasiFs","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WasiState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_clock_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_u","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_filestat_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_ciovec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_dirent_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_event_fd_readwrite_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_event_u","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_prestat_u_dir_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_prestat_u","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_prestat_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrestatEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_fdstat_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_filestat_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_iovec_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_clock_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_fs_readwrite_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_u","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __wasi_subscription_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasiSubscription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubscriptionEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasiVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasiError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WasiEnv","synthetic":true,"types":[]}];
implementors["wasmer_wasi_experimental_io_devices"] = [{"text":"impl RefUnwindSafe for InputEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameBufferFileType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FrameBufferState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameBuffer","synthetic":true,"types":[]}];
implementors["wasmer_wast"] = [{"text":"impl RefUnwindSafe for DirectiveError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirectiveErrors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wasi_test","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for envs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for args","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for preopens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for map_dirs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for temp_dirs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for assert_return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stdin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for assert_stdout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for assert_stderr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for fake_i64_const","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WasiTest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Envs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Args&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Preopens&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MapDirs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TempDirs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssertReturn","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Stdin&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AssertStdout&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AssertStderr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputCapturerer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Wast","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()